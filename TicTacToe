import java.util.Arrays;
import java.util.Scanner;
public class TicTacToe
{
    //Array of arrays
    //row major system
    public static int row, column; //So that other classes can view it 
    static char turn = 'X';
    static char setUp[][] = new char[3][3];
    //Static allows me to call it 
    //Used in a main method

    static Scanner input = new Scanner(System.in);
    public static void main(String[] args)
    {
        for(int i = 0; i < 3; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                setUp[i][j]= '*'; 
            }
        }
        Run();
        //Nested for loop to go through all the values 
    }
    
    public static void Run() //game logic
    {
        boolean run = true;
        while(run) //while run is true
        {
            System.out.println("Enter the row and column");
            printSetUpInfo();
            int row = input.nextInt()-1; 
            int column = input.nextInt()-1;
            setUp[row][column] = turn;
            
            if(check(row, column))
            {
                run = false;
                System.out.println("Game over! PLayer "+turn+" wins!");
            }
            
            if(turn == 'X')
            {
                turn = 'O';
            }
            else 
            {
                turn = 'X';
            }
        }
    }
    
    public static void printSetUpInfo()
    {
        for(int i = 0; i < 3; i++)
        {
            System.out.println();//telling it to print row
            for(int j = 0; j < 3; j++)
            {
                System.out.print(setUp[i][j]+ " | "); //Trick is to not use ln
            }
        }
    }
    
    public static boolean check(int uRow, int uColumn)
    {
        //Checking perpendicular victory
        if(setUp[uRow][0] == setUp[uRow][1]
        && setUp[uRow][0] == setUp[uRow][2])
        {
            return true;
        }
        else if(setUp[0][uColumn] == setUp[1][uColumn]
        && setUp[0][uColumn] == setUp[2][uColumn])
        {
            return true;
        }
        //Checking diagonal victory
        if(setUp[0][0] == setUp[1][1]
        && setUp[0][0] == setUp[2][2]
        && setUp[1][1] !='*')
        {
            return true;
        }
        else if(setUp[0][2] == setUp[1][1]
        && setUp[0][2] == setUp[2][0]
        && setUp[1][1] != '*')
        {
            return true;
        }
        return false;
    }
}

